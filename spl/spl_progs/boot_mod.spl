loadi(4, 17);
loadi(5, 18);
loadi(63,13);
loadi(64,14);
loadi(65,7);
//loadi(66,8);
loadi(22,35);
loadi(23,36);
loadi(2,15);
loadi(3,16);
loadi(16,29);
loadi(17,30);
loadi(83,71);
loadi(50,63);
loadi(51,64);
loadi(40,53);
loadi(41,54);
loadi(48,61);
loadi(49,62);
loadi(8,21);
loadi(9,22);
loadi(14,27);
loadi(15,28);
loadi(20,33);
loadi(21,34);
loadi(42,55);
loadi(43,56);
loadi(44,57);
loadi(45,58);
loadi(59,3);
loadi(60,4);
loadi(6,19);
loadi(7,20);
loadi(61,2);
loadi(18,31);
loadi(19,32);
loadi(24,37);
loadi(25,38);
loadi(32,45);
loadi(33,46);
loadi(28,41);
loadi(29,42);
loadi(30,43);
loadi(31,44);
loadi(62,5);
loadi(10,23);
loadi(11,24);
loadi(12,25);
loadi(13,26);
loadi(46,59);
loadi(47,60);
loadi(67,9);
loadi(68,10);
loadi(26,39);
loadi(27,40);
loadi(34,47);
loadi(35,48);
loadi(36,49);
loadi(37,50);
loadi(52,65);
loadi(53,66);
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";
[PTBR+16] = 66;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

R0 = PROCESS_TABLE + 16;
[R0 + 11] = 77;
[R0 + 4] = CREATED;
[R0 + 1] = 1;
[R0 + 12] = 0;
[R0 + 13] = 8*512;
[R0 + 14] = PAGE_TABLE_BASE + 20;
[R0 + 15] = 10;
[66*512] = [65*512 + 1];

PTBR = PAGE_TABLE_BASE + 40;
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";
[PTBR+8] = 67;
[PTBR+9] = "0100";
[PTBR+10] = 68;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";
[PTBR+16] = 78;
[PTBR+17] = "0110";
[PTBR+18] = 79;
[PTBR+19] = "0110";

R0 = PROCESS_TABLE + 32;
[R0 + 11] = 80;
[R0 + 4] = TERMINATED;
[R0 + 1] = 2;
[R0 + 2] = 1;
[R0 + 12] = 0;
[R0 + 13] = 8*512;
[R0 + 14] = PAGE_TABLE_BASE + 40;
[R0 + 15] = 10;
[78*512] = [67*512 + 1];

alias ri R0;
ri = 0;
R1 = ([PROCESS_TABLE + 32 + 11])*512 + 496 ;
while(ri < 16)do
	[R1 + ri] = -1;
	ri = ri + 2;
endwhile;

alias pid R1;
pid = 0;
while(pid < 16) do
	[PROCESS_TABLE + 16*pid] = 0;
	if(pid > 2 && pid < 15)then
	    [PROCESS_TABLE + 16*pid + 4] = TERMINATED;
	endif;
	pid = pid + 1;
endwhile;
//[TERMINAL_STATUS_TABLE] = 0;
//[DISK_STATUS_TABLE] = 0;
//[SYSTEM_STATUS_TABLE + 3] = 0;
//[SYSTEM_STATUS_TABLE + 2] = 45;
//[SYSTEM_STATUS_TABLE + 4] = 0;
//[SYSTEM_STATUS_TABLE + 5] = 0;
alias m_e R2;
m_e = 0;
while(m_e < 128)do
	if(m_e < 83)then
		[MEMORY_FREE_LIST + m_e] = 1;
	else
		[MEMORY_FREE_LIST + m_e] = 0;
	endif;
	m_e = m_e + 1;
endwhile;
pid = 2;
alias de R3;
de = 2;
R4 = DISK_MAP_TABLE + pid*10;
while(de < 10)do
	[R4 + de] = -1;
	de = de + 1;
endwhile;
[DISK_MAP_TABLE + pid*10 + 4] = 9;
[DISK_MAP_TABLE + pid*10 + 5] = 10;
alias st R4;
st = 0;
while(st < MAX_SEM_COUNT)do
	[SEMAPHORE_TABLE + st*4] = -1;
	[SEMAPHORE_TABLE + st*4 + 1] = 0;
	st = st + 1;
endwhile;
alias fst R5;
fst = 0;
while(fst < MAX_FILE_NUM)do
	[FILE_STATUS_TABLE +fst*4] = -1;
	[FILE_STATUS_TABLE +fst*4 + 1] = -1;
	fst = fst + 1;
endwhile;
alias bt R6;
bt = 0;
while(bt < MAX_BUFFER)do
	[BUFFER_TABLE + bt*4] = -1;
	[BUFFER_TABLE + bt*4 + 1] = 0;
	[BUFFER_TABLE + bt*4 + 2] = -1;
	bt = bt + 1;
endwhile;
alias ot R7;
ot = 0;
while(ot < MAX_OPENFILE_NUM)do
	[OPEN_FILE_TABLE + ot*4] = -1;
	[OPEN_FILE_TABLE + ot*4 + 1] = 0;
	ot = ot + 1;
endwhile;
//SET USAGE INTO NOT PRINT ON STARTUP
[75*512 + 4] = 0;

return;
