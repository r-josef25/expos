alias userSP R0;
userSP = SP;
[PROCESS_TABLE +([SYSTEM_STATUS_TABLE + 1]*16) +13] = SP;
SP = [PROCESS_TABLE +([SYSTEM_STATUS_TABLE + 1]*16) +11]*512 - 1; 
alias sys R1;
sys = [[PTBR + ((userSP - 5)/512)*2]*512 + (userSP-5)%512];
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = sys;
alias ret R2;
ret = [PTBR + ((userSP - 1)/512)*2]*512 + (userSP-1)%512;
//if([SYSTEM_STATUS_TABLE + 1] != 1 || [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 3] != 1)then
//	[ret] = -1;
if([SYSTEM_STATUS_TABLE + 1] != 2 || [SYSTEM_STATUS_TABLE] != 1)then
	[ret] = -1;
else
	breakpoint;
	R1 = 5;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_1;
	alias bi R4;
	bi = 0;
	while(bi < MAX_BUFFER)do
		if([BUFFER_TABLE + bi*4] != -1 && [BUFFER_TABLE + bi*4 + 1] == 1)then
			multipush(R4);
			R1 = 1;
			R2 = [SYSTEM_STATUS_TABLE + 1];
			R3 = 71 + bi;
			R4 = [BUFFER_TABLE + bi*4];
			call MOD_4;
			multipop(R4);
		endif;
		bi = bi + 1;
	endwhile;
	R1 = 1;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = 59;
	R4 = 3;
	call MOD_4;
	R1 = 1;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = 60;
	R4 = 4;
	call MOD_4;
	R1 = 1;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = 61;
	R4 = 2;
	call MOD_4;
	R1 = 1;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = 62;
	R4 = 5;
	call MOD_4;
	halt;
endif;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
SP = [PROCESS_TABLE +([SYSTEM_STATUS_TABLE + 1]*16) +13];
ireturn;
